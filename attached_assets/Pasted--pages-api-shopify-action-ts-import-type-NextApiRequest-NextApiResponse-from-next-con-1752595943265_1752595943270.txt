// /pages/api/shopify/[action].ts

import type { NextApiRequest, NextApiResponse } from 'next';

const SHOPIFY_API_KEY = process.env.SHOPIFY_API_KEY!;
const SHOPIFY_API_SECRET = process.env.SHOPIFY_API_SECRET!;
const SHOPIFY_SCOPES = process.env.SHOPIFY_SCOPES || 'read_products';
const SHOPIFY_REDIRECT_URI = process.env.SHOPIFY_REDIRECT_URL!;

import crypto from 'crypto';
import querystring from 'querystring';
import fetch from 'node-fetch';

function generateNonce(length = 16) {
  return crypto.randomBytes(length).toString('hex');
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { action } = req.query;

  if (action === 'start') {
    // Step 1: Redirect user to Shopify's OAuth permission page

    const shop = req.query.shop;
    if (!shop || typeof shop !== 'string') {
      return res.status(400).send('Missing or invalid shop parameter');
    }

    const state = generateNonce();
    // TODO: Save state in a secure cookie or session for verification (simplified here)

    const installUrl =
      `https://${shop}/admin/oauth/authorize?` +
      querystring.stringify({
        client_id: SHOPIFY_API_KEY,
        scope: SHOPIFY_SCOPES,
        redirect_uri: SHOPIFY_REDIRECT_URI,
        state,
        grant_options: ['per-user'],
      });

    return res.redirect(installUrl);
  }

  if (action === 'callback') {
    // Step 2: Handle OAuth callback and exchange code for access token

    const { shop, code, state, hmac } = req.query;

    if (!shop || !code || !state || !hmac) {
      return res.status(400).send('Required query parameters missing');
    }

    // Verify HMAC to confirm request came from Shopify
    const { hmac: _hmac, ...params } = req.query as Record<string, string>;
    const message = querystring.stringify(params);
    const generatedHmac = crypto
      .createHmac('sha256', SHOPIFY_API_SECRET)
      .update(message)
      .digest('hex');

    if (generatedHmac !== hmac) {
      return res.status(400).send('HMAC validation failed');
    }

    // Exchange code for access token
    const tokenResponse = await fetch(`https://${shop}/admin/oauth/access_token`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        client_id: SHOPIFY_API_KEY,
        client_secret: SHOPIFY_API_SECRET,
        code,
      }),
    });

    if (!tokenResponse.ok) {
      return res.status(500).send('Failed to get access token');
    }

    const tokenJson = await tokenResponse.json();
    // Store tokenJson.access_token securely for this shop!
    // For demo: we return the access token directly (NOT for production)

    return res.status(200).json({
      access_token: tokenJson.access_token,
      shop,
      scopes: tokenJson.scope,
    });
  }

  if (action === 'products') {
    // Step 3: Fetch products for connected shop (requ
