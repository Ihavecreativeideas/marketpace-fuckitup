📊 Export Report
🏥 System Health
')) { issues.push('Unclosed script tag'); } if (content.includes('')) { issues.push('Unclosed style tag'); } // Count opening vs closing tags const openTags = (content.match(/<[^\/][^>]*>/g) || []).length; const closeTags = (content.match(/<\/[^>]*>/g) || []).length; const selfClosing = (content.match(/<[^>]*\/>/g) || []).length; if (issues.length > 0) { statusElement.innerHTML = `⚠️ ${issues.join(', ')}`; statusElement.style.color = '#ffaa00'; } else if (Math.abs(openTags - closeTags - selfClosing) > 5) { statusElement.innerHTML = '⚠️ Tag mismatch'; statusElement.style.color = '#ffaa00'; } else { statusElement.innerHTML = '✅ Valid'; statusElement.style.color = '#00ff88'; } } catch (error) { statusElement.innerHTML = '❌ Syntax Error'; statusElement.style.color = '#ff4444'; } }; window.handleEditorKeyDown = (event) => { const textarea = event.target; // Tab key handling for indentation if (event.key === 'Tab') { event.preventDefault(); const start = textarea.selectionStart; const end = textarea.selectionEnd; const value = textarea.value; textarea.value = value.substring(0, start) + ' ' + value.substring(end); textarea.selectionStart = textarea.selectionEnd = start + 2; updatePreview(); updateCharCount(); checkSyntax(); } // Auto-close tags if (event.key === '>') { setTimeout(() => { const start = textarea.selectionStart; const value = textarea.value; const beforeCursor = value.substring(0, start); const tagMatch = beforeCursor.match(/<(\w+)[^>]*>$/); if (tagMatch && !['img', 'br', 'hr', 'input', 'meta', 'link'].includes(tagMatch[1])) { const tagName = tagMatch[1]; const afterCursor = value.substring(start); if (!afterCursor.startsWith(``)) { textarea.value = value.substring(0, start) + `` + value.substring(start); textarea.selectionStart = textarea.selectionEnd = start; updatePreview(); updateCharCount(); } } }, 10); } }; } catch (error) { console.error('Edit page error:', error); alert('❌ Error opening page editor'); } } async function saveContentChanges() { try { const response = await fetch('/api/admin/content/save?token=admin_token_2025', { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { alert(`💾 ${data.message}`); } else { alert('❌ Failed to save changes'); } } catch (error) { alert('❌ Error: ' + error.message); } } async function previewChanges() { try { const response = await fetch('/api/admin/content/preview?token=admin_token_2025'); const data = await response.json(); if (data.success) { alert(`👀 ${data.message}`); } else { alert('❌ Failed to preview changes'); } } catch (error) { alert('❌ Error: ' + error.message); } } async function revertChanges() { if (confirm('Are you sure you want to revert all changes?')) { try { const response = await fetch('/api/admin/content/revert?token=admin_token_2025', { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { alert(`↶ ${data.message}`); } else { alert('❌ Failed to revert changes'); } } catch (error) { alert('❌ Error: ' + error.message); } } } // Integration functions async function testAllIntegrations() { try { const response = await fetch('/api/admin/integrations/test?token=admin_token_2025', { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { alert(`🔍 ${data.message}`); } else { alert('❌ Integration test failed'); } } catch (error) { alert('❌ Error: ' + error.message); } } async function refreshAPIKeys() { try { const response = await fetch('/api/admin/integrations/refresh?token=admin_token_2025', { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { alert(`🔑 ${data.message}`); } else { alert('❌ Failed to refresh API keys'); } } catch (error) { alert('❌ Error: ' + error.message); } } async function addNewIntegration() { try { const response = await fetch('/api/admin/integrations/add?token=admin_token_2025', { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { alert(`➕ ${data.message}`); } else { alert('❌ Failed to add integration'); } } catch (error) { alert('❌ Error: ' + error.message); } } async function exportIntegrationReport() { try { const response = await fetch('/api/admin/integrations/export?token=admin_token_2025'); const data = await response.json(); if (data.success) { alert(`📊 ${data.message}`); } else { alert('❌ Export failed'); } } catch (error) { alert('❌ Error: ' + error.message); } } async function emergencyDisconnect() { if (confirm('⚠️ This will disconnect ALL integrations. Are you sure?')) { try { const response = await fetch('/api/admin/integrations/emergency?token=admin_token_2025', { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { alert(`🚨 ${data.message}`); } else { alert('❌ Emergency disconnect failed'); } } catch (error) { alert('❌ Error: ' + error.message); } } } async function exportDriverData() { try { const response = await fetch('/api/admin/drivers/export?token=admin_token_2025'); const data = await response.json(); if (data.success) { alert(`📊 ${data.message}`); } else { alert('❌ Export failed'); } } catch (error) { alert('❌ Error: ' + error.message); } } // Promotion functions async function createPromotion() { try { const response = await fetch('/api/admin/promotions/create?token=admin_token_2025', { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { alert(`➕ ${data.message}`); } else { alert('❌ Failed to create promotion'); } } catch (error) { alert('❌ Error: ' + error.message); } } async function sendPromoEmails() { try { const response = await fetch('/api/admin/promotions/email?token=admin_token_2025', { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { alert(`📧 ${data.message}`); } else { alert('❌ Failed to send emails'); } } catch (error) { alert('❌ Error: ' + error.message); } } async function generatePromoCodes() { try { const response = await fetch('/api/admin/promotions/codes?token=admin_token_2025', { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { alert(`🎟️ ${data.message}\nCodes: ${data.codes.join(', ')}`); } else { alert('❌ Failed to generate codes'); } } catch (error) { alert('❌ Error: ' + error.message); } } async function launchSocialCampaign() { try { const response = await fetch('/api/admin/promotions/social?token=admin_token_2025', { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { alert(`📱 ${data.message}\nPlatforms: ${data.platforms.join(', ')}`); } else { alert('❌ Failed to launch campaign'); } } catch (error) { alert('❌ Error: ' + error.message); } } // Route functions async function optimizeAllRoutes() { try { const response = await fetch('/api/admin/routes/optimize-all?token=admin_token_2025', { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { alert(`⚡ ${data.message}\nDetails: ${data.optimization.routesOptimized} routes optimized, ${data.optimization.timeSaved} saved, ${data.optimization.efficiencyGain} efficiency gain!`); } else { alert('❌ Route optimization failed'); } } catch (error) { alert('❌ Error: ' + error.message); } } async function createShopRoute() { try { const response = await fetch('/api/admin/routes/shop?token=admin_token_2025', { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { alert(`🏪 ${data.message}`); } else { alert('❌ Failed to create route'); } } catch (error) { alert('❌ Error: ' + error.message); } } async function viewRouteAnalytics() { try { const response = await fetch('/api/admin/routes/analytics?token=admin_token_2025'); const data = await response.json(); if (data.success) { alert(`📊 Route Analytics:\nTotal Routes: ${data.analytics.totalRoutes}\nAvg Efficiency: ${data.analytics.avgEfficiency}\nCompletion Rate: ${data.analytics.completionRate}\nDriver Rating: ${data.analytics.driverRating}/5`); } else { alert('❌ Failed to load analytics'); } } catch (error) { alert('❌ Error: ' + error.message); } } async function exportRouteData() { try { const response = await fetch('/api/admin/routes/export?token=admin_token_2025'); const data = await response.json(); if (data.success) { alert(`📄 ${data.message}`); } else { alert('❌ Export failed'); } } catch (error) { alert('❌ Error: ' + error.message); } } // Content functions async function editPage(pageType) { try { const response = await fetch('/api/admin/content/edit?token=admin_token_2025', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ page: pageType }) }); const data = await response.json(); if (data.success) { alert(`📝 ${data.message}`); } else { alert('❌ Failed to open editor'); } } catch (error) { alert('❌ Error: ' + error.message); } } async function saveContentChanges() { try { const response = await fetch('/api/admin/content/save?token=admin_token_2025', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ changes: 5 }) }); const data = await response.json(); if (data.success) { alert(`💾 ${data.message}`); } else { alert('❌ Failed to save changes'); } } catch (error) { alert('❌ Error: ' + error.message); } } async function previewChanges() { try { const response = await fetch('/api/admin/content/preview?token=admin_token_2025', { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { alert(`👀 ${data.message}`); window.open('/', '_blank'); } else { alert('❌ Preview failed'); } } catch (error) { alert('❌ Error: ' + error.message); } } async function revertChanges() { if (confirm('↶ Are you sure you want to revert all unsaved changes?')) { try { const response = await fetch('/api/admin/content/revert?token=admin_token_2025', { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { alert(`↶ ${data.message}`); } else { alert('❌ Revert failed'); } } catch (error) { alert('❌ Error: ' + error.message); } } } // Integration functions async function testAllIntegrations() { try { const response = await fetch('/api/admin/integrations/test-all?token=admin_token_2025', { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { const results = data.results; const summary = Object.entries(results).map(([key, status]) => `${key}: ${status}`).join(', '); alert(`🔍 ${data.message}\nResults: ${summary}`); } else { alert('❌ Integration test failed'); } } catch (error) { alert('❌ Error: ' + error.message); } } async function refreshAPIKeys() { if (confirm('🔑 Refresh all API keys? This may temporarily disrupt services.')) { try { const response = await fetch('/api/admin/integrations/refresh-keys?token=admin_token_2025', { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { alert(`🔑 ${data.message}`); } else { alert('❌ Failed to refresh keys'); } } catch (error) { alert('❌ Error: ' + error.message); } } } async function addNewIntegration() { try { const response = await fetch('/api/admin/integrations/add?token=admin_token_2025', { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { alert(`➕ ${data.message}`); } else { alert('❌ Failed to open integration marketplace'); } } catch (error) { alert('❌ Error: ' + error.message); } } async function exportIntegrationReport() { try { const response = await fetch('/api/admin/integrations/export?token=admin_token_2025'); const data = await response.json(); if (data.success) { alert(`📊 ${data.message}`); } else { alert('❌ Export failed'); } } catch (error) { alert('❌ Error: ' + error.message); } } async function emergencyDisconnect() { if (confirm('🚨 EMERGENCY: Disconnect all external integrations?')) { try { const response = await fetch('/api/admin/integrations/emergency?token=admin_token_2025', { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { alert(`🚨 ${data.message}`); } else { alert('❌ Emergency disconnect failed'); } } catch (error) { alert('❌ Error: ' + error.message); } } } // Auto-refresh stats every 30 seconds setInterval(loadAdminStats, 30000);